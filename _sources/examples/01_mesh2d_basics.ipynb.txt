{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Mesh2d Basics\n",
    "\n",
    "This is the basic introduction for using the `meshkernel` library.\n",
    "\n",
    "`meshkernel` can be used for creating and manipulating various kinds of meshes.\n",
    "\n",
    "The most common case deals with unstructured, two-dimensional meshes which is why this tutorial focuses on these."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "At the very beginning, the necessary libraries have to be imported."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "651f8535",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "from meshkernel import GeometryList, MakeGridParameters, MeshKernel, ProjectionType"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c86a232",
   "metadata": {},
   "source": [
    "`meshkernel` provides a set of convenience methods for creating common meshes.\n",
    "\n",
    "We use the curvilinear_compute_rectangular_grid method to create a simple curvilinear grid. You can look at the documentation in order to find all its parameters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "87d93674",
   "metadata": {},
   "outputs": [],
   "source": [
    "mk = MeshKernel()\n",
    "\n",
    "make_grid_parameters = MakeGridParameters()\n",
    "make_grid_parameters.num_columns = 3\n",
    "make_grid_parameters.num_rows = 2\n",
    "make_grid_parameters.angle = 0.0\n",
    "make_grid_parameters.origin_x = 0.0\n",
    "make_grid_parameters.origin_y = 0.0\n",
    "make_grid_parameters.block_size_x = 1.0\n",
    "make_grid_parameters.block_size_y = 1.0\n",
    "\n",
    "mk.curvilinear_compute_rectangular_grid(make_grid_parameters)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We convert the curvilinear grid to an unstructured mesh and get the resulting mesh2d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "mk.curvilinear_convert_to_mesh2d()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "mesh2d_input = mk.mesh2d_get()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`Mesh2D` has three mandatory attributes, which are enough to fully describe any unstructured mesh.\n",
    "\n",
    "The first two are `node_x` and `node_y`.\n",
    "They are one-dimensional `double` arrays, which describe the position of the nodes as can be seen below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "# Plot white points only for scaling the plot\n",
    "ax.plot(mesh2d_input.node_x, mesh2d_input.node_y, \"ow\")\n",
    "\n",
    "# Numbering the nodes\n",
    "for i in range(mesh2d_input.node_x.size):\n",
    "    ax.annotate(\n",
    "        int(i),\n",
    "        xy=(mesh2d_input.node_x[i], mesh2d_input.node_y[i]),\n",
    "        ha=\"center\",\n",
    "        va=\"center\",\n",
    "        fontsize=12,\n",
    "        color=\"blue\",\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The third mandatory attribute is `edge_nodes`.\n",
    "It describes the indices of the nodes that make up the edges.\n",
    "\n",
    "Two indices describe one edge.\n",
    "So in our case the indices 0-4, 1-5, 2-6, ... each describe one edge."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0,  4,  1,  5,  2,  6,  3,  7,  4,  8,  5,  9,  6, 10,  7, 11,  0,\n",
       "        1,  1,  2,  2,  3,  4,  5,  5,  6,  6,  7,  8,  9,  9, 10, 10, 11])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mesh2d_input.edge_nodes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With all three parameters together we can plot the mesh."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXoAAAD4CAYAAADiry33AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAAsTAAALEwEAmpwYAAAS70lEQVR4nO3df4xdZ33n8fenxoG2oGJqbxs5ThzaSEv4kUl6ZVKBilFL6qA27qpI62wLAYEsUbL9qUqhlZJu+KfbSm1FSRssagUq6tAG6LqV02AtZLNdCPWEHQJJGnDdH7EVydOYBtogIqff/eMeszeTGd/jmTueO0/eL+lqznmec858Hx/7M2fOPddPqgpJUru+Y60LkCStLoNekhpn0EtS4wx6SWqcQS9JjXvBWhewmM2bN9f27dvXugxJWjceeOCBf66qLYv1TWXQb9++ndnZ2bUuQ5LWjST/uFSft24kqXEGvSQ1zqCXpMYZ9JLUOINekho3NuiTbEvymSQPJ3koyS8ssk2SvD/J0SQPJrlqpO+GJF/tXjdMegCSpLPr83jlaeBXquoLSV4CPJDkcFU9PLLNtcBl3eu1wB8Cr03yMuAWYABUt+/BqvraREchSVrS2KCvqseBx7vlbyR5BNgKjAb9buAjNfw/j+9P8tIkFwI7gcNVdQogyWFgF3BgoqMYsXPnah1ZklbXvfeuznHP6R59ku3AlcDnF3RtBR4bWT/etS3Vvtix9yaZTTI7Pz9/LmV9286dMDe3rF21SubmPCfTyPMyfebmVu9CtfcnY5O8GPg48ItV9fVJF1JV+4B9AIPBYNmzoczMrN5PRZ27M39xPSfTxfMyfVbzbkSvK/okGxmG/Eer6hOLbHIC2DayflHXtlS7JOk86fPUTYA/Ah6pqt9ZYrODwNu6p2+uBp7s7u3fA1yTZFOSTcA1XZsk6Tzpc+vmdcBbgS8lmevafg24GKCqbgcOAW8GjgJPAe/o+k4leR9wpNvv1jNvzEqSzo8+T938NZAx2xTwniX69gP7l1WdJGnF/GSsJDXOoJekxhn0ktQ4g16SGmfQS1LjDHpJapxBL0mNM+glqXEGvSQ1zqCXpMYZ9JLUOINekhpn0EtS4wx6SWqcQS9JjTPoJalxYyceSbIf+AngZFW9apH+XwV+ZuR4rwC2dLNL/QPwDeAZ4HRVDSZVuCSpnz5X9HcAu5bqrKrfrqqZqpoB3gv8rwXTBb6x6zfkJWkNjA36qroP6DvP6/XAgRVVJEmaqIndo0/yXQyv/D8+0lzAp5I8kGTvmP33JplNMjs/Pz+psiTpeW+Sb8b+JPB/Fty2eX1VXQVcC7wnyY8stXNV7auqQVUNtmzZMsGyJOn5bZJBv4cFt22q6kT39STwSWDHBL+fJKmHiQR9ku8B3gD8j5G2707ykjPLwDXAlyfx/SRJ/fV5vPIAsBPYnOQ4cAuwEaCqbu82+0/Ap6rq30Z2/T7gk0nOfJ8/qaq/mlzpkqQ+xgZ9VV3fY5s7GD6GOdp2DLhiuYVJkibDT8ZKUuMMeklqnEEvSY0z6CWpcQa9JDXOoJekxhn0ktQ4g16SGmfQS1LjDHpJapxBL0mNM+glqXEGvSQ1zqCXpMYZ9JLUOINekho3NuiT7E9yMsmi0wAm2ZnkySRz3evmkb5dSR5NcjTJTZMsXJLUT58r+juAXWO2+d9VNdO9bgVIsgG4DbgWuBy4PsnlKylWknTuxgZ9Vd0HnFrGsXcAR6vqWFU9DdwJ7F7GcSRJKzCpe/Q/nOSLSe5O8squbSvw2Mg2x7u2RSXZm2Q2yez8/PyEypIkTSLovwBcUlVXAL8P/PlyDlJV+6pqUFWDLVu2TKAsSRJMIOir6utV9a/d8iFgY5LNwAlg28imF3VtkqTzaMVBn+T7k6Rb3tEd8wngCHBZkkuTXADsAQ6u9PtJks7NC8ZtkOQAsBPYnOQ4cAuwEaCqbgfeArw7yWngm8CeqirgdJIbgXuADcD+qnpoVUYhSVrS2KCvquvH9H8A+MASfYeAQ8srTZI0CX4yVpIaZ9BLUuMMeklqnEEvSY0z6CWpcQa9JDXOoJekxhn0ktQ4g16SGmfQS1LjDHpJapxBL0mNM+glqXEGvSQ1zqCXpMaNDfok+5OcTPLlJfp/JsmDSb6U5LNJrhjp+4eufS7J7CQLlyT10+eK/g5g11n6/x54Q1W9GngfsG9B/xuraqaqBssrUZK0En1mmLovyfaz9H92ZPV+hpOAS5KmxKTv0b8TuHtkvYBPJXkgyd6z7Zhkb5LZJLPz8/MTLkuSnr/GXtH3leSNDIP+9SPNr6+qE0n+A3A4yd9W1X2L7V9V++hu+wwGg5pUXZL0fDeRK/okrwE+BOyuqifOtFfVie7rSeCTwI5JfD9JUn8rDvokFwOfAN5aVV8Zaf/uJC85swxcAyz65I4kafWMvXWT5ACwE9ic5DhwC7ARoKpuB24Gvhf4gyQAp7snbL4P+GTX9gLgT6rqr1ZhDJKks+jz1M31Y/rfBbxrkfZjwBXP3UOSdD75yVhJapxBL0mNM+glqXEGvSQ1zqCXpMYZ9JLUOINekhpn0EtS4wx6SWqcQS9JjTPoJalxBr0kNc6gl6TGGfSS1DiDXpIaZ9BLUuN6BX2S/UlOJll0KsAMvT/J0SQPJrlqpO+GJF/tXjdMqnBJUj99r+jvAHadpf9a4LLutRf4Q4AkL2M49eBrGU4MfkuSTcstVpJ07sZOJQhQVfcl2X6WTXYDH6mqAu5P8tIkFzKca/ZwVZ0CSHKY4Q+MAyuq+izm5mDnztU6us7V3Nzwq+dkunheps/cHMzMrM6xJ3WPfivw2Mj68a5tqfbnSLI3yWyS2fn5+QmVJUnqdUV/PlTVPmAfwGAwqOUeZ2YG7r13QkVpxc5cMXpOpovnZfqs5m9Xk7qiPwFsG1m/qGtbql2SdJ5MKugPAm/rnr65Gniyqh4H7gGuSbKpexP2mq5NknSe9Lp1k+QAwzdWNyc5zvBJmo0AVXU7cAh4M3AUeAp4R9d3Ksn7gCPdoW4988asJOn86PvUzfVj+gt4zxJ9+4H9516aJGkS/GSsJDXOoJekxhn0ktQ4g16SGmfQS1LjDHpJapxBL0mNM+glqXEGvSQ1zqCXpMYZ9JLUOINekhpn0EtS4wx6SWqcQS9JjTPoJalxvYI+ya4kjyY5muSmRfp/N8lc9/pKkn8Z6XtmpO/gBGuXJPUwdoapJBuA24A3AceBI0kOVtXDZ7apql8a2f6/AleOHOKbVTUzsYolSeekzxX9DuBoVR2rqqeBO4HdZ9n+euDAJIqTJK1cn6DfCjw2sn68a3uOJJcAlwKfHml+UZLZJPcn+amlvkmSvd12s/Pz8z3KkiT1Mek3Y/cAd1XVMyNtl1TVAPgvwO8l+YHFdqyqfVU1qKrBli1bJlyWJD1/9Qn6E8C2kfWLurbF7GHBbZuqOtF9PQbcy7Pv30uSVlmfoD8CXJbk0iQXMAzz5zw9k+Q/ApuAz420bUrywm55M/A64OGF+0qSVs/Yp26q6nSSG4F7gA3A/qp6KMmtwGxVnQn9PcCdVVUju78C+GCSf2f4Q+U3R5/WkSStvrFBD1BVh4BDC9puXrD+G4vs91ng1SuoT5K0Qn4yVpIaZ9BLUuMMeklqnEEvSY0z6CWpcQa9JDXOoJekxhn0ktQ4g16SGmfQS1LjDHpJapxBL0mNM+glqXEGvSQ1zqCXpMb1Cvoku5I8muRokpsW6X97kvkkc93rXSN9NyT5ave6YZLFS5LGGzvxSJINwG3Am4DjwJEkBxeZKepjVXXjgn1fBtwCDIACHuj2/dpEqpckjdXnin4HcLSqjlXV08CdwO6ex/9x4HBVnerC/TCwa3mlSpKWo0/QbwUeG1k/3rUt9NNJHkxyV5Jt57gvSfYmmU0yOz8/36MsSVIfk3oz9i+A7VX1GoZX7R8+1wNU1b6qGlTVYMuWLRMqS5LUJ+hPANtG1i/q2r6tqp6oqm91qx8CfqjvvpKk1dUn6I8AlyW5NMkFwB7g4OgGSS4cWb0OeKRbvge4JsmmJJuAa7o2SdJ5Mvapm6o6neRGhgG9AdhfVQ8luRWYraqDwM8nuQ44DZwC3t7teyrJ+xj+sAC4tapOrcI4JElLGBv0AFV1CDi0oO3mkeX3Au9dYt/9wP4V1ChJWgE/GStJjTPoJalxBr0kNc6gl6TGGfSS1DiDXpIaZ9BLUuMMeklqnEEvSY0z6CWpcQa9JDXOoJekxhn0ktQ4g16SGmfQS1LjDHpJalyvoE+yK8mjSY4muWmR/l9O8nCSB5P8zySXjPQ9k2Suex1cuK8kaXWNnWEqyQbgNuBNwHHgSJKDVfXwyGb/FxhU1VNJ3g38FvCfu75vVtXMZMuWJPXV54p+B3C0qo5V1dPAncDu0Q2q6jNV9VS3ej9w0WTLlCQtV5+g3wo8NrJ+vGtbyjuBu0fWX5RkNsn9SX5qqZ2S7O22m52fn+9RliSpj16Tg/eV5GeBAfCGkeZLqupEkpcDn07ypar6u4X7VtU+YB/AYDCoSdYlSc9nfa7oTwDbRtYv6tqeJcmPAb8OXFdV3zrTXlUnuq/HgHuBK1dQryTpHPUJ+iPAZUkuTXIBsAd41tMzSa4EPsgw5E+OtG9K8sJueTPwOmD0TVxJ0iobe+umqk4nuRG4B9gA7K+qh5LcCsxW1UHgt4EXA3+WBOCfquo64BXAB5P8O8MfKr+54GkdSdIq63WPvqoOAYcWtN08svxjS+z3WeDVKylQkrQyfjJWkhpn0EtS4wx6SWqcQS9JjTPoJalxBr0kNc6gl6TGGfSS1DiDXpIaZ9BLUuMMeklqnEEvSY0z6CWpcQa9JDXOoJekxhn0ktS4XkGfZFeSR5McTXLTIv0vTPKxrv/zSbaP9L23a380yY9PsHZJUg9jgz7JBuA24FrgcuD6JJcv2OydwNeq6geB3wX+e7fv5QznmH0lsAv4g+54kqTzpM9UgjuAo1V1DCDJncBunj3J927gN7rlu4APZDh57G7gzqr6FvD3SY52x/vcZMp/rrk52LlztY6uczU3N/zqOZkunpfpMzcHMzOrc+w+Qb8VeGxk/Tjw2qW26SYTfxL43q79/gX7bl3smyTZC+wFuPjii/vU/hz33utf3GmzWn9xtTKel+kzMzPMsNXQa3Lw86Gq9gH7AAaDQS33OKv1ByVJ61WfN2NPANtG1i/q2hbdJskLgO8Bnui5ryRpFfUJ+iPAZUkuTXIBwzdXDy7Y5iBwQ7f8FuDTVVVd+57uqZxLgcuAv5lM6ZKkPsbeuunuud8I3ANsAPZX1UNJbgVmq+og8EfAH3dvtp5i+MOAbrs/ZfjG7WngPVX1zCqNRZK0iAwvvKfLYDCo2dnZtS5DktaNJA9U1WCxPj8ZK0mNM+glqXEGvSQ1zqCXpMZN5ZuxSeaBf1zm7puBf55gOWuplbG0Mg5wLNOolXHAysZySVVtWaxjKoN+JZLMLvXO83rTylhaGQc4lmnUyjhg9cbirRtJapxBL0mNazHo9611ARPUylhaGQc4lmnUyjhglcbS3D16SdKztXhFL0kaYdBLUuPWbdCvZMLyadJjHG9PMp9krnu9ay3qHCfJ/iQnk3x5if4keX83zgeTXHW+a+yrx1h2Jnly5JzcfL5r7CvJtiSfSfJwkoeS/MIi20z9uek5jnVxXpK8KMnfJPliN5b/tsg2k82vqlp3L4b/XfLfAS8HLgC+CFy+YJufA27vlvcAH1vrupc5jrcDH1jrWnuM5UeAq4AvL9H/ZuBuIMDVwOfXuuYVjGUn8JdrXWfPsVwIXNUtvwT4yiJ/x6b+3PQcx7o4L92f84u75Y3A54GrF2wz0fxar1f0356wvKqeBs5MWD5qN/Dhbvku4Ee7CcunSZ9xrAtVdR/DuQiWshv4SA3dD7w0yYXnp7pz02Ms60ZVPV5VX+iWvwE8wnPnbZ76c9NzHOtC9+f8r93qxu618KmYiebXeg36xSYsX3jSnzVhOXBmwvJp0mccAD/d/Up9V5Jti/SvB33Hul78cPer991JXrnWxfTR/fp/JcMryFHr6tycZRywTs5Lkg1J5oCTwOGqWvKcTCK/1mvQP5/8BbC9ql4DHOb//5TX2vkCw/9X5Arg94E/X9tyxkvyYuDjwC9W1dfXup7lGjOOdXNequqZqpphOI/2jiSvWs3vt16DfiUTlk+TseOoqieq6lvd6oeAHzpPtU1aMxPFV9XXz/zqXVWHgI1JNq9xWUtKspFhOH60qj6xyCbr4tyMG8d6Oy8AVfUvwGeAXQu6Jppf6zXoVzJh+TQZO44F90qvY3hvcj06CLyte8LjauDJqnp8rYtajiTff+Z+aZIdDP8dTdtFBDB8oobhnM6PVNXvLLHZ1J+bPuNYL+clyZYkL+2WvxN4E/C3CzabaH6NnRx8GtUKJiyfJj3H8fNJrmM4ufophk/hTJ0kBxg+9bA5yXHgFoZvMlFVtwOHGD7dcRR4CnjH2lQ6Xo+xvAV4d5LTwDeBPVN4EXHG64C3Al/q7gkD/BpwMayrc9NnHOvlvFwIfDjJBoY/jP60qv5yNfPL/wJBkhq3Xm/dSJJ6MuglqXEGvSQ1zqCXpMYZ9JLUOINekhpn0EtS4/4fbifeQMkYk8cAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "mesh2d_input.plot_edges(ax, color=\"blue\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In order to interact with the `meshkernel` library, we create a new instance of the `MeshKernel` class.\n",
    "\n",
    "The `projection` parameter of its constructor describes whether the mesh is cartesian (`ProjextionType.CARTESIAN`) or spherical (`ProjextionType.SPHERICAL`). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "mk = MeshKernel(projection=ProjectionType.CARTESIAN)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Each instance holds it own state.\n",
    "This state can be accessed with the corresponding getter and setter methods."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "mk.mesh2d_set(mesh2d_input)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "mesh2d_output_0 = mk.mesh2d_get()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We have now set mesh2d and immediately got it again, without asking `meshkernel` to execute any operations in between.\n",
    "\n",
    "After we set the mesh2d, meshkernel calculated the face data and edge coordinates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "mesh2d_output_0.plot_faces(ax)\n",
    "\n",
    "# Draw face index at the face's center\n",
    "for face_index, (face_x, face_y) in enumerate(\n",
    "    zip(mesh2d_output_0.face_x, mesh2d_output_0.face_y)\n",
    "):\n",
    "    ax.text(face_x, face_y, face_index, ha=\"center\", va=\"center\", fontsize=22)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`meshkernel` also searches for the middle point of edges and adds them as parameters to the `Mesh2D` class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "ax.plot(mesh2d_output_0.edge_x, mesh2d_output_0.edge_y, \".\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Until now everything *looked* structured, so let us add a few nodes to change that."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "node_index_0 = mk.mesh2d_insert_node(4.0, 1.5)\n",
    "node_index_1 = mk.mesh2d_insert_node(4.0, 2.5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We also have to connect our nodes, otherwise `meshkernel` will garbage collect them."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "edge_index_0 = mk.mesh2d_insert_edge(7, node_index_0)\n",
    "edge_index_1 = mk.mesh2d_insert_edge(node_index_0, node_index_1)\n",
    "edge_index_3 = mk.mesh2d_insert_edge(node_index_1, 11)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let us get the new state."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "mesh2d_output_1 = mk.mesh2d_get()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If we plot the output, we can also see that `meshkernel` immediately found a new face."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "mesh2d_output_1.plot_faces(ax)\n",
    "\n",
    "# Draw face index at the face's center\n",
    "for face_index, (face_x, face_y) in enumerate(\n",
    "    zip(mesh2d_output_1.face_x, mesh2d_output_1.face_y)\n",
    "):\n",
    "    ax.text(face_x, face_y, face_index, ha=\"center\", va=\"center\", fontsize=22)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also delete nodes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "mk.mesh2d_delete_node(node_index_1)\n",
    "mesh2d_output_2 = mk.mesh2d_get()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We are back to six faces, but one hanging edge remains."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "mesh2d_output_2.plot_edges(ax, color=\"blue\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Quite often, hanging edges are unwanted.\n",
    "That is why `meshkernel` provides methods to deal with them.\n",
    "For once we can it can count hanging edges."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "hanging_edges = mk.mesh2d_get_hanging_edges()\n",
    "assert hanging_edges.size == 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`meshkernel` can also find and delete them."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "mk.mesh2d_delete_hanging_edges()\n",
    "mesh2d_output_3 = mk.mesh2d_get()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After we have deleted the hanging edges, we are back at the original state."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "mesh2d_output_3.plot_edges(ax, color=\"blue\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
