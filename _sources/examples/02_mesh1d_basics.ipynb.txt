{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Mesh1d basics\n",
    "\n",
    "\n",
    "This tutorial will show how to deal with 1d meshes and how they can interact with 2d meshes."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "At the very beginning, the necessary libraries have to be imported."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "from meshkernel import Mesh1d, GeometryList, MakeGridParameters, MeshKernel"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, let us describe our 1d mesh with six points of a sinusoidal function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "node_x = np.linspace(0, 2 * np.pi, 8)\n",
    "node_y = np.sin(node_x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We want a continuous line, which is why we just connect each point with the following one."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "edge_nodes = np.zeros(node_x.size * 2, np.int32)\n",
    "edge_index = 0\n",
    "for node_index in range(node_x.size - 1):\n",
    "    edge_nodes[edge_index] = node_index\n",
    "    edge_index += 1\n",
    "    edge_nodes[edge_index] = node_index + 1\n",
    "    edge_index += 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then, we can create our `Mesh1d` instance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "mesh1d_input = Mesh1d(node_x, node_y, edge_nodes)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We create a meshkernel instance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "mk = MeshKernel()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We use the curvilinear_compute_rectangular_grid method to create a simple curvilinear grid. You can look at the documentation in order to find all its parameters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "7394971e",
   "metadata": {},
   "outputs": [],
   "source": [
    "make_grid_parameters = MakeGridParameters()\n",
    "make_grid_parameters.num_columns = 7\n",
    "make_grid_parameters.num_rows = 3\n",
    "make_grid_parameters.angle = 0.0\n",
    "make_grid_parameters.origin_x = -0.1\n",
    "make_grid_parameters.origin_y = -1.5\n",
    "make_grid_parameters.block_size_x = 1.0\n",
    "make_grid_parameters.block_size_y = 1.0\n",
    "\n",
    "mk.curvilinear_compute_rectangular_grid(make_grid_parameters)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a064dba",
   "metadata": {},
   "source": [
    "We convert the curvilinear grid to an unstructured `mesh2d` and get it from MeshKernel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "741a1118",
   "metadata": {},
   "outputs": [],
   "source": [
    "mk.curvilinear_convert_to_mesh2d()\n",
    "mesh2d_input = mk.mesh2d_get()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a46af64",
   "metadata": {},
   "source": [
    "Set mesh1d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "dce60979",
   "metadata": {},
   "outputs": [],
   "source": [
    "mk.mesh1d_set(mesh1d_input)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e063d81",
   "metadata": {},
   "source": [
    "This is how our meshes currently look like:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "42dd9174",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "\n",
    "mesh1d_input.plot_edges(ax, color=\"blue\")\n",
    "mesh2d_input.plot_edges(ax, color=\"black\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Typically if we have 1d and 2d meshes we want to create contacts between them.\n",
    "All contacts methods expect a node mask, which determines which 1d nodes should be connected.\n",
    "In our case we want to consider all nodes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "node_mask = np.full(mesh1d_input.node_x.size, True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We call the `contacts_compute_multiple` method in order to create the contacts."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "mk.contacts_compute_multiple(node_mask)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then, we retrieve the state from the `MeshKernel` instance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "mesh1d_output_0 = mk.mesh1d_get()\n",
    "mesh2d_output_0 = mk.mesh2d_get()\n",
    "contacts_output_0 = mk.contacts_get()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We see that there are now contacts between the 1d nodes and the 2d faces."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "c008a6b1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "mesh1d_output_0.plot_edges(ax, color=\"blue\")\n",
    "mesh2d_output_0.plot_edges(ax, color=\"black\")\n",
    "contacts_output_0.plot_edges(ax, mesh1d_output_0, mesh2d_output_0, color=\"red\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
